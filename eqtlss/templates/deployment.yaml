apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.service.name }}"
  namespace: "{{ .Values.k8Namespace }}"
  labels:
    version: "{{ .Values.image.tag }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: "{{ .Values.service.name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.service.name }}"
    spec:
      # Pod level security context for filesystem permissions
      securityContext:
        fsGroup: {{ .Values.image.gid }}
      # Set termination grace period to allow for clean shutdown
      terminationGracePeriodSeconds: 120
      containers:
      - name: "{{ .Values.service.name }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: {{ .Values.service.uvicornCmd }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        # Container level security context
        securityContext:
          runAsUser: {{ .Values.image.uid }}
          runAsGroup: {{ .Values.image.gid }}
          allowPrivilegeEscalation: false
        env:
        - name: UID
          value: "{{ .Values.image.uid }}"
        - name: GID
          value: "{{ .Values.image.gid }}"
        - name: USER
          value: "{{ .Values.image.user }}"
        - name: HDF5_ROOT_DIR
          value: "{{ .Values.image.dataMountPath }}"
        # Properly quote and escape the MongoDB URI
        - name: MONGO_URI
          value: {{ .Values.env.MONGO_URI | quote }}
        - name: DB_NAME
          value: "{{ .Values.env.DB_NAME }}"
        - name: ENVIRONMENT
          value: "{{ .Values.env.ENVIRONMENT }}"
        - name: OPENBLAS_NUM_THREADS
          value: "1"
        - name: OMP_NUM_THREADS
          value: "1"
        - name: MKL_NUM_THREADS
          value: "1"
        - name: NUMEXPR_MAX_THREADS
          value: "1"

        - name: PYTHONASYNCIO_DEBUG
          value: "1"
        - name: PYTHONTHREADDEBUG
          value: "1"

        - name: FASTAPI_THREADPOOL_USE_CONTEXTVAR
          value: "1"

        resources:
          requests:
            cpu: "{{ .Values.resources.requests.cpu }}"
            memory: "{{ .Values.resources.requests.memory }}"
          limits:
            cpu: "{{ .Values.resources.limits.cpu }}"
            memory: "{{ .Values.resources.limits.memory }}"
        ports:
        - name: http
          containerPort: {{ .Values.image.containerPort }}
          protocol: TCP
        volumeMounts:
        - mountPath: "{{ .Values.image.logMountPath }}"
          name: log
        - mountPath: "{{ .Values.image.dataMountPath }}"
          name: data
          readOnly: true
      volumes:
      - name: log
        persistentVolumeClaim:
          claimName: "{{ .Values.volume.log.ClaimName }}"
      - name: data
        nfs:
          server: "{{ .Values.volume.data.nfsServer }}"
          path: "{{ .Values.volume.data.path }}"
          readOnly: true
