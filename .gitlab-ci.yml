image: docker:latest

stages:
  - docs
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_IMAGE: ebispot/eqtl-sumstats-api
  CI_REGISTRY_DOCS_IMAGE: ebispot/eqtl-sumstats-docs
  DOCKER_AUTH_CONFIG: '{"auths":{"https://index.docker.io/v1/":{"auth":"${DOCKER_AUTH_STRING}"}}}'

# Configure docker:dind service with authentication
.docker-dind-config: &docker-dind-config
  services:
    - name: docker:24.0.7-dind
      command: ["--registry-mirror=https://mirror.gcr.io"]
  before_script:
    - echo "$DOCKER_HUB_PASSWORD" > dhpw.txt
    - docker login -u "${DOCKER_HUB_USER}" --password-stdin < dhpw.txt docker.io

# generate the docs with sphinx
sphinxdocs:
  image: $CI_REGISTRY_IMAGE:dev
  stage: docs
  script:
   - mkdir -p logs
   - make clean
   - make html
  artifacts:
    expire_in: '2 hrs'
    paths:
    - docs/build/html
  only:
   - master
   - dev

# always build an image tagged with the commit SHA from master
build:
  <<: *docker-dind-config
  stage: build
  script:
   - docker pull $CI_REGISTRY_IMAGE:latest || true  # Don't fail if image doesn't exist
   - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
   - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
   - master

build_dev:
  <<: *docker-dind-config
  stage: build
  script:
   - docker pull $CI_REGISTRY_IMAGE:latest || true
   - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
   - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:dev
   - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
   - docker push $CI_REGISTRY_IMAGE:dev
  only:
   - dev

build_docs:
  <<: *docker-dind-config
  stage: build
  script:
   - docker pull $CI_REGISTRY_DOCS_IMAGE:latest || true
   - docker build -f nginx/Dockerfile --cache-from $CI_REGISTRY_DOCS_IMAGE:latest -t $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_SHA .
   - docker push $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_SHA
  dependencies:
    - sphinxdocs
  only:
   - master
   - dev

# if a tag is created create an images with the tag and a latest
build_release:
  <<: *docker-dind-config
  stage: build
  variables:
    GIT_STRATEGY: none
  script:
   - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
   - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
   - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
   - docker push $CI_REGISTRY_IMAGE:latest
   - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
   - tags

build_docs_release:
  <<: *docker-dind-config
  stage: build
  variables:
    GIT_STRATEGY: none
  script:
   - docker pull $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_SHA
   - docker tag $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_DOCS_IMAGE:latest
   - docker tag $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_TAG
   - docker push $CI_REGISTRY_DOCS_IMAGE:latest
   - docker push $CI_REGISTRY_DOCS_IMAGE:$CI_COMMIT_TAG
  dependencies:
    - sphinxdocs
  only:
   - tags

deploy_staging:
  image: dtzar/helm-kubectl:2.13.1
  stage: deploy
  script:
    - echo "Deploy to staging server"
    - mkdir -p /root/.kube
    - echo ${FALLBACK_KUBECONF} | base64 -d > /root/.kube/config
    - helm init --stable-repo-url https://charts.helm.sh/stable
    - helm delete --purge eqtl-sumstats-dev || true
    - helm install --name eqtl-sumstats-dev --set k8Namespace=dev-gwas,service.name=eqtl-rest-api-dev,staticService.name=eqtl-api-docs-dev,staticService.path=/api-docs,image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_SHA,image.uid=$UID,image.gid=$GID,staticService.image.repository=$CI_REGISTRY_DOCS_IMAGE,staticService.image.tag=$CI_COMMIT_SHA,volume.data.nfsServer=$NFS_SERVER,volume.data.path=$NFS_PATH_DEV,replicaCount=1,env.MONGO_URI=$MONGO_URI,env.DB_NAME=$DB_NAME,env.ENVIRONMENT=staging ./eqtlss/ --wait --timeout 1800
  environment:
    name: dev
  when: manual
  only:
    - master
    - dev

deploy_fallback:
  image: dtzar/helm-kubectl:2.13.1
  stage: deploy
  script:
    - echo "Deploy to fallback server"
    - mkdir -p /root/.kube
    - echo ${FALLBACK_KUBECONF} | base64 -d > /root/.kube/config
    - helm init --stable-repo-url https://charts.helm.sh/stable
    - helm delete --purge eqtl-sumstats || true
    - helm install --name eqtl-sumstats --set k8Namespace=eqtl,image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_SHA,image.uid=$UID,image.gid=$GID,staticService.image.repository=$CI_REGISTRY_DOCS_IMAGE,staticService.image.tag=$CI_COMMIT_SHA,volume.data.nfsServer=$NFS_SERVER,volume.data.path=$NFS_PATH,env.MONGO_URI=$MONGO_URI,env.DB_NAME=$DB_NAME,env.ENVIRONMENT=fallback ./eqtlss/ --wait
  environment:
    name: fallback
  when: manual
  only:
    - tags

deploy_prod:
  image: dtzar/helm-kubectl:2.13.1
  stage: deploy
  script:
    - echo "Deploy to production server"
    - mkdir -p /root/.kube
    - echo ${PROD_KUBECONF} | base64 -d > /root/.kube/config
    - helm init --stable-repo-url https://charts.helm.sh/stable
    - helm delete --purge eqtl-sumstats || true
    - helm install --name eqtl-sumstats --set k8Namespace=eqtl,image.repository=$CI_REGISTRY_IMAGE,image.tag=$CI_COMMIT_SHA,image.uid=$UID,image.gid=$GID,staticService.image.repository=$CI_REGISTRY_DOCS_IMAGE,staticService.image.tag=$CI_COMMIT_SHA,volume.data.nfsServer=$NFS_SERVER_PROD,volume.data.path=$NFS_PATH_PROD,env.MONGO_URI=$MONGO_URI,env.DB_NAME=$DB_NAME,env.ENVIRONMENT=production ./eqtlss/ --wait
  environment:
    name: production
  when: manual
  only:
    - tags
